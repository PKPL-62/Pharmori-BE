"""
Django settings for pharmori_be project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

import sys

TESTING = "test" in sys.argv 

# Load environment variables from .env file
load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

# Gunakan variabel dari .env
SECRET_KEY = os.getenv("SECRET_KEY")

# Jangan gunakan DEBUG=True di production
DEBUG = "False"
AUTH_SERVICE_URL = os.getenv("AUTH_SERVICE_URL")

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",")


# Local
DATABASES = {
    'default': {
        'ENGINE': os.getenv("DATABASE_ENGINE_LOCAL"),
        'NAME': BASE_DIR / os.getenv("DATABASE_NAME_LOCAL"),
    }
}


# Deployment
# DATABASES = {
#      'default': {
#          'ENGINE': 'django.db.backends.{}'.format(
#              os.getenv('DATABASE_ENGINE', 'sqlite3')
#          ),
#          'NAME': os.getenv('DATABASE_NAME', 'polls'),
#          'USER': os.getenv('DATABASE_USERNAME', 'myprojectuser'),
#          'PASSWORD': os.getenv('DATABASE_PASSWORD', 'password'),
#          'HOST': os.getenv('DATABASE_HOST', '127.0.0.1'),
#          'PORT': os.getenv('DATABASE_PORT', 5432),
#      }
#  }

# DATABASES = {
#     'default': {
#         'ENGINE': os.getenv("DATABASE_ENGINE"),
#         'NAME': os.getenv("DATABASE_NAME"),
#         'USER': os.getenv("DATABASE_USER"),
#         'PASSWORD': os.getenv("DATABASE_PASSWORD"),
#         'HOST': os.getenv("DATABASE_HOST"),
#         'PORT': os.getenv("DATABASE_PORT"),
#     }
# }

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'medicine',
    'prescription',
    'core'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'pharmori_be.middleware.JWTAuthenticationMiddleware',
    'pharmori_be.middleware.RequestLoggingMiddleware',
    'django_ratelimit.middleware.RatelimitMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pharmori_be.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pharmori_be.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

RATELIMIT_VIEW = "pharmori_be.utils.ratelimit_exceeded_view"

# Set logging
import sys

import logging

if 'test' in sys.argv:
    logging.disable(logging.CRITICAL)
    RATELIMIT_ENABLE = False

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'detailed': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'requests.log'),
            'formatter': 'detailed',
            'mode': 'a',  # Append mode
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'detailed',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}